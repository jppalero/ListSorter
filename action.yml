# Find the id of the last build
last_workflow=$(curl -X GET "https://api.github.com/repos/$INPUT_OWNER/$INPUT_REPO/actions/workflows/$INPUT_WORKFLOW_FILE_NAME/runs" \
  -H 'Accept: application/vnd.github.antiope-preview+json' \
  -H "Authorization: Bearer $INPUT_GITHUB_TOKEN" | jq '[.workflow_runs[]] | first')
last_workflow_id=$(echo $last_workflow | jq '.id')
echo "The workflow id is [$last_workflow_id]."
echo ""
conclusion=$(echo $last_workflow | jq '.conclusion')
status=$(echo $last_workflow | jq '.status')

while [[ $conclusion == "null" && $status != "\"completed\"" ]]
do
  echo "Sleeping for $wait_interval seconds"
  sleep $wait_interval
  workflow=$(curl -X GET "https://api.github.com/repos/$INPUT_OWNER/$INPUT_REPO/actions/workflows/$INPUT_WORKFLOW_FILE_NAME/runs" \
    -H 'Accept: application/vnd.github.antiope-preview+json' \
    -H "Authorization: Bearer $INPUT_GITHUB_TOKEN" | jq '.workflow_runs[] | select(.id == '$last_workflow_id')')
  conclusion=$(echo $workflow | jq '.conclusion')
  status=$(echo $workflow | jq '.status')
  echo "Checking conclusion [$conclusion]"
  echo "Checking status [$status]"
done

if [[ $conclusion == "\"success\"" && $status == "\"completed\"" ]]
then
  echo "Yes, success"
else
  # Alternative "failure"
  echo "Conclusion is not success, its [$conclusion]."
  if [ "$propagate_failure" = true ]
  then
    echo "Propagating failure to upstream job"
    exit 1
  fi
fi